{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { productListReducer, productDetailsReducer } from './reducers/productReducers';\nimport { CartReducer } from './reducers/cartReducer';\nimport { userLoginReducer, userRegisterReducer, userDetailsReducer, userUpdateProfileReducer } from './reducers/userReducer';\nimport { orderCreateReducer } from './reducers/orderReducers';\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  cart: CartReducer,\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userDetails: userDetailsReducer,\n  userUpdateProfile: userUpdateProfileReducer,\n  orderCreate: orderCreateReducer\n});\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : [];\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ? JSON.parse(localStorage.getItem('shippingAddress')) : {};\nconst initialState = {\n  cart: {\n    cartItems: cartItemsFromStorage,\n    shippingAddress: shippingAddressFromStorage\n  },\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n};\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["C:/Proshop/frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productListReducer","productDetailsReducer","CartReducer","userLoginReducer","userRegisterReducer","userDetailsReducer","userUpdateProfileReducer","orderCreateReducer","reducer","productList","productDetails","cart","userLogin","userRegister","userDetails","userUpdateProfile","orderCreate","cartItemsFromStorage","localStorage","getItem","JSON","parse","userInfoFromStorage","shippingAddressFromStorage","initialState","cartItems","shippingAddress","userInfo","middleware","store"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,eAArB,EAAsCC,eAAtC,QAA4D,OAA5D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AACA,SAAQC,kBAAR,EAA4BC,qBAA5B,QAAwD,4BAAxD;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,gBAAT,EAA2BC,mBAA3B,EAAgDC,kBAAhD,EAAoEC,wBAApE,QAAoG,wBAApG;AACA,SAAQC,kBAAR,QAAiC,0BAAjC;AACA,MAAMC,OAAO,GAAEZ,eAAe,CAAC;AAC3Ba,EAAAA,WAAW,EAAET,kBADc;AAE3BU,EAAAA,cAAc,EAAET,qBAFW;AAG3BU,EAAAA,IAAI,EAAET,WAHqB;AAI3BU,EAAAA,SAAS,EAAET,gBAJgB;AAK3BU,EAAAA,YAAY,EAAET,mBALa;AAM3BU,EAAAA,WAAW,EAAET,kBANc;AAO3BU,EAAAA,iBAAiB,EAAET,wBAPQ;AAQ3BU,EAAAA,WAAW,EAAET;AARc,CAAD,CAA9B;AAWA,MAAMU,oBAAoB,GAAEC,YAAY,CAACC,OAAb,CAAqB,WAArB,IAAoCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAApC,GAAoF,EAAhH;AAEA,MAAMG,mBAAmB,GAAEJ,YAAY,CAACC,OAAb,CAAqB,UAArB,IACzBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CADyB,GAEzB,IAFF;AAKA,MAAMI,0BAA0B,GAAEL,YAAY,CAACC,OAAb,CAAqB,iBAArB,IAChCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CADgC,GAEhC,EAFF;AAIA,MAAMK,YAAY,GAAC;AACfb,EAAAA,IAAI,EAAE;AAAEc,IAAAA,SAAS,EAAER,oBAAb;AACNS,IAAAA,eAAe,EAAEH;AADX,GADS;AAGfX,EAAAA,SAAS,EAAE;AAACe,IAAAA,QAAQ,EAAEL;AAAX;AAHI,CAAnB;AAOA,MAAMM,UAAU,GAAC,CAAC9B,KAAD,CAAjB;AAEA,MAAM+B,KAAK,GAAElC,WAAW,CAACa,OAAD,EAAUgB,YAAV,EAAwBzB,mBAAmB,CAC9DF,eAAe,CAAC,GAAG+B,UAAJ,CAD+C,CAA3C,CAAxB;AAGA,eAAeC,KAAf","sourcesContent":["import {createStore, combineReducers, applyMiddleware} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\nimport {productListReducer, productDetailsReducer} from './reducers/productReducers'\r\nimport { CartReducer } from './reducers/cartReducer'\r\nimport { userLoginReducer, userRegisterReducer, userDetailsReducer, userUpdateProfileReducer } from './reducers/userReducer'\r\nimport {orderCreateReducer} from './reducers/orderReducers'\r\nconst reducer= combineReducers({\r\n    productList: productListReducer,\r\n    productDetails: productDetailsReducer,\r\n    cart: CartReducer,\r\n    userLogin: userLoginReducer,\r\n    userRegister: userRegisterReducer,\r\n    userDetails: userDetailsReducer,\r\n    userUpdateProfile: userUpdateProfileReducer,\r\n    orderCreate: orderCreateReducer\r\n})\r\n\r\nconst cartItemsFromStorage= localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : []\r\n\r\nconst userInfoFromStorage= localStorage.getItem('userInfo') \r\n? JSON.parse(localStorage.getItem('userInfo')) \r\n: null\r\n\r\n\r\nconst shippingAddressFromStorage= localStorage.getItem('shippingAddress') \r\n? JSON.parse(localStorage.getItem('shippingAddress')) \r\n: {}\r\n\r\nconst initialState={\r\n    cart: { cartItems: cartItemsFromStorage,\r\n    shippingAddress: shippingAddressFromStorage },\r\n    userLogin: {userInfo: userInfoFromStorage}\r\n}\r\n\r\n\r\nconst middleware=[thunk]\r\n\r\nconst store= createStore(reducer, initialState, composeWithDevTools\r\n    (applyMiddleware(...middleware)))\r\n\r\nexport default store"]},"metadata":{},"sourceType":"module"}