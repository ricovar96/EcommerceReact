{"ast":null,"code":"import { USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS } from \"../constants/userConstants\";\nimport axios from 'axios';\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users', {\n      name,\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Proshop/frontend/src/actions/userAction.js"],"names":["USER_LOGIN_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGOUT","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","axios","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","message","logout","removeItem","register","name"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,kBAA1B,EAA8CC,kBAA9C,EAAkEC,WAAlE,EAA+EC,kBAA/E,EAAmGC,qBAAnG,EAA0HC,qBAA1H,QAAuJ,4BAAvJ;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,MAAMC,KAAK,GAAE,CAACC,KAAD,EAAQC,QAAR,KAAqB,MAAOC,QAAP,IAAmB;AACxD,MAAG;AACCA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEX;AADD,KAAD,CAAR;AAGA,UAAMY,MAAM,GAAE;AACVC,MAAAA,OAAO,EAAC;AACJ,wBAAiB;AADb;AADE,KAAd;AAKA,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMR,KAAK,CAACS,IAAN,CAAW,kBAAX,EAA+B;AAACP,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAA/B,EAAkDG,MAAlD,CAArB;AACAF,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEV,kBADD;AAELe,MAAAA,OAAO,EAAEF;AAFJ,KAAD,CAAR;AAIAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAjC;AACH,GAfD,CAgBA,OAAOO,KAAP,EAAa;AACTX,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEZ,eADD;AAELiB,MAAAA,OAAO,EAAEK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAAtC,GAAgDF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAApE,GAA8EF,KAAK,CAACE;AAFxF,KAAD,CAAR;AAIH;AACJ,CAvBM;AAyBP,OAAO,MAAMC,MAAM,GAAC,MAAKd,QAAD,IAAY;AAChCO,EAAAA,YAAY,CAACQ,UAAb,CAAwB,UAAxB;AACAf,EAAAA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAAET;AAAP,GAAD,CAAR;AACH,CAHM;AAKP,OAAO,MAAMwB,QAAQ,GAAE,CAACC,IAAD,EAAOnB,KAAP,EAAcC,QAAd,KAA2B,MAAOC,QAAP,IAAmB;AACjE,MAAG;AACCA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEP;AADD,KAAD,CAAR;AAGA,UAAMQ,MAAM,GAAE;AACVC,MAAAA,OAAO,EAAC;AACJ,wBAAiB;AADb;AADE,KAAd;AAKA,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMR,KAAK,CAACS,IAAN,CACjB,YADiB,EAEjB;AAACY,MAAAA,IAAD;AAAOnB,MAAAA,KAAP;AAAcC,MAAAA;AAAd,KAFiB,EAGjBG,MAHiB,CAArB;AAMAF,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEN,qBADD;AAELW,MAAAA,OAAO,EAAEF;AAFJ,KAAD,CAAR;AAKAJ,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEV,kBADD;AAELe,MAAAA,OAAO,EAAEF;AAFJ,KAAD,CAAR;AAIAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAjC;AACH,GAzBD,CA0BA,OAAOO,KAAP,EAAa;AACTX,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAER,kBADD;AAELa,MAAAA,OAAO,EACPK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAAtC,GACEF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OADtB,GAEEF,KAAK,CAACE;AALH,KAAD,CAAR;AAOH;AACJ,CApCM","sourcesContent":["import { USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS } from \"../constants/userConstants\"\r\nimport axios from 'axios'\r\nexport const login= (email, password) => async (dispatch) =>{\r\n    try{\r\n        dispatch({\r\n            type: USER_LOGIN_REQUEST\r\n        })\r\n        const config ={\r\n            headers:{\r\n                'Content-Type' : 'application/json' \r\n            }\r\n        }\r\n        const {data} = await axios.post('/api/users/login', {email, password}, config)\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n    }\r\n    catch (error){\r\n        dispatch({\r\n            type: USER_LOGIN_FAIL,\r\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const logout=()=>(dispatch)=>{\r\n    localStorage.removeItem('userInfo')\r\n    dispatch({type: USER_LOGOUT})\r\n}\r\n\r\nexport const register= (name, email, password) => async (dispatch) =>{\r\n    try{\r\n        dispatch({\r\n            type: USER_REGISTER_REQUEST\r\n        })\r\n        const config ={\r\n            headers:{\r\n                'Content-Type' : 'application/json' \r\n            }\r\n        }\r\n        const {data} = await axios.post(\r\n            '/api/users', \r\n            {name, email, password}, \r\n            config\r\n            )\r\n\r\n        dispatch({\r\n            type: USER_REGISTER_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n    }\r\n    catch (error){\r\n        dispatch({\r\n            type: USER_REGISTER_FAIL,\r\n            payload:\r\n            error.response && error.response.data.message \r\n            ? error.response.data.message \r\n            : error.message\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}